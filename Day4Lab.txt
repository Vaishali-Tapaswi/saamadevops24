Lab 7 - API gateway
	Lambda - demo1 - 
		import json

		def lambda_handler(event, context):
		    print("Hello from Lambda!")
		    return {
			'statusCode': 200,
			'body': json.dumps('Hello from Lambda!')
		    }
	
	Expose demo1 as API Gateway
		Console -> Services -> API Gateway
			Create API -> REST API -> build 
				Choose the protocol
					REST
					Create new API -> new API
					Setting 	name - demo1
					Endpoint Type - regional
				
				Actions
					new resource
						Resource Name - demo1
						Resource Path - /demo1
						create resource
				Actions (on /demo1)
					create method -> get
						Integration type - lambda
						Lambda Region - us-east-1
						Lambda Function - demo1 (arn)
						add permission -> ok
				Test 
					Test-> will invoke your lambda function
				Check
					AWS cloudwatch
			--> Role / Permission
Lab6 - Create an object in s3 bucket 
	Create bucket - 
		Bucket name - tmp-01-01-lambda-put
			enable versioning
	Lambda 
		Create function - tmptwo
  		
  			import boto3
  			# Create an S3 client
  			s3 = boto3.client('s3')
  
  			def lambda_handler(event, context):
  			 bucket_name = event['bucket_name']
  			 response = s3.put_object(
  				 Bucket=bucket_name,
  				 Key='demo1',
  				 Body='Sample Text demo1',
  				 ACL='public-read'
  			 )
  		  	 return response
	Run -> by passing {"bucket_name":"tmp-01-01-lambda-put"}
		observe error
	bucket -> public -> read/write
	lambda -role-> attach policy -s3 full accesss
	
	Optional -> {"bucket_name":"tmp-01-01-lambda-put"}
	
Lab5 - aws console - lambda 
                  import json
         
                  def lambda_handler(event, context):
                      msg = 'Hello {} {}!'.format(event['first_name'], event['last_name'])  
                       
                      return { 
                          'message' : msg
                      }
       input 
         {
             "first_name": "abc",
             "last_name": "Smith"
         }
         Test -> deploy
         SQS -> create myqueue
         Modify IAM - role to include to add SQS and SNS full access
         Change function to add trigger for SQS-MyQueue
         check logs 

Lab4 - aws console -> lambda -> create simple python function and test locally
         verify - cloud watch logs, iam role created
Lab3 - create new repo demo3 
                with Hello.java 
             1. change execution to container - java container 
             2. javac Hello.java and in other job java Hello 
                        observe error
             3. define artifact for Hello.class
             4. create a variable in workflow 
             5. print variable using echo command 

Lab2 - create new repo demo2
        with readme file 
        actions -> generate new action (python publish workflow)
        save (demo2.yaml) -> observe as soon as save/push -> workflow execution starts 
                delete deployment part and just modify to run python hello.py 
                save, watch messages and errors 
        create hello.py with just print message
        modify installations instructions to to it from requirement.txt 
        save, watch messages and errors , create requirement.txt 

Lab1 - Create new repo demo1
        with readme file 
        actions -> generate new action (Simple workflow)
              read the generated file ->   on (hooks), jobs, actions
        save (demo1.yaml) -> observe as soon as save/push -> workflow execution starts 
        for single line -> try to add multiple commands 
        check dir 
        create a new file and check dir (echo "aa" > aa.txt)
        watch messages and errors 
            
      
