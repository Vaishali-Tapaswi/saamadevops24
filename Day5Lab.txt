Lab3 - create a step function
	step function -> create state machine -> helloworld workflow->run 
	edit -> 
		{
		  "Comment": "A Hello World example demonstrating various state types of the Amazon States Language. It is composed of flow control states only, so it does not need resources to run.",
		  "StartAt": "mystart",
		  "States": {
		    "mystart": {
		      "Type": "Pass",
		      "Next": "myend",
		      "Result": {
		        "change": "NewName"
		      }
		    },
		    "myend": {
		      "Type": "Pass",
		      "End": true
		    }
		  }
		}

// Optional Lab for customization of request -
	Accept input from API gateway as 	
		{
		  "$schema": "http://json-schema.org/draft-04/schema#",
		  "title": "PhotosInputModel",
		  "type": "object",
		  "properties":
		    {
		      "foldername": { "type": "string" },
		      "filename": { "type": "string" },
		      "content": { "type": "string" }
		    }
		}
	In integration request -> create mapping template for application/json as 
		{  "bucket_name":  $input.json('$.foldername'),
		      "key": $input.json('$.filename') ,
		      "body": $input.json('$.content')
		}
	so input does not expose internal function details to api gateway users 
Lab 2 - API gateway
	Expose tmpthree as API Gateway
		Console -> Services -> API Gateway
			Create API -> REST API -> build 
				Choose the protocol
					REST
					Create new API -> new API
					Setting 	name - demo1
					Endpoint Type - regional
				
				Actions
					new resource
						Resource Name - tmp3
						Resource Path - /tmp3
						create resource
				Actions (on /tmp3)
					create method -> post
						Integration type - lambda
						Lambda Region - us-east-1
						Lambda Function - tmp3 (arn)
						add permission -> ok
				create model -> bucketdetails
						{
						  "$schema": "http://json-schema.org/draft-04/schema#",
						  "title": "PhotosInputModel",
						  "type": "object",
						  "properties":
							{
							  "bucket_name": { "type": "string" },
							  "key": { "type": "string" },
							  "body": { "type": "string" }
							}
						}

				Test 
					Test-> will invoke your lambda function
						request body 
									{"bucket_name":"tmp-02-02-lambda-put",
										"key": "demo1.txt",
										"body":"content for demo111111.txt"}
				Check
					AWS cloudwatch

Lab1 -  Create an object in s3 bucket using lambda function
	Create bucket - 
		Bucket name - tmp-02-02-lambda-put
			enable versioning, make public with read/write access
	Lambda 
		Create function - tmpthree
  		
  			import boto3
  			# Create an S3 client
  			s3 = boto3.client('s3')
  
  			def lambda_handler(event, context):
  			 bucket_name = event['bucket_name']
			 key = event['key']
			 body = event['body']
  			 response = s3.put_object(
  				 Bucket=bucket_name,
  				 Key=key,
  				 Body=body,
  				 ACL='public-read'
  			 )
  		  	 return response
	Run -> by passing 
			{"bucket_name":"tmp-02-02-lambda-put",
			"key": "demo1.txt",
			"body":"content for demo1.txt"
			}
run -> check errors - modify role, s3 bucket permissions accordingly

