Lab7 - selenium 
         pip install selenium 
         download chrome web driver- https://developer.chrome.com/docs/chromedriver/downloads
         create  folder and extract webdriver and modify demo1.py (line chrome_driver_path=)
         create demo1.py
                  from selenium import webdriver
                  from selenium.webdriver.chrome.service import Service
                  from selenium.webdriver.common.by import By
                  from selenium.webdriver.common.keys import Keys
                  
                  # Specify the path to the ChromeDriver executable
                  chrome_driver_path = '/work/seleniumdrivers/chrome/chromedriver.exe'
                  
                  # Set up the Service object
                  service = Service(chrome_driver_path)
                  
                  # Initialize the WebDriver with the Service object
                  driver = webdriver.Chrome(service=service)
                  
                  # Open Google
                  driver.get("https://www.google.com")
                  # Close the browser
                  driver.quit()
         python demo1.py
Lab6 - repeat on command prompt 
         to create and change branch -> git checkout -b dev1

Lab5 - github
         create two new braches -> dev1 and dev2 
                  modify dev1 -> readme file 
                  modify dev2 -> readme file 
         on top of main branch -> notification about dev1 and dev2 getting modified
         click on dev1 -> merge request -> create request, complete, delete dev1 brach after successful merge
         click on dev1 -> merge request -> observe conflict messages 
                                    ->resolve conflicts , modify readme and complete merge 

Lab4 - 
         dev1 = c:\saama\gitdemo\demo3\dev1
         dev2 = c:\saama\gitdemo\demo3\dev2
         Dev1 - 
         	git clone https://github.com/Vaishali-Tapaswi/tmp1
         	cd tmp1
         	create file dev1.py 
         	git add dev1.py 
         	git remote add o1 https://@github.com/Vaishali-Tapaswi/tmp1
         	git push o1 
         		-> push successful, observe +1 commits on github 
         Dev2 -
         	git clone https://github.com/Vaishali-Tapaswi/tmp1
         	cd tmp1	
         	create file dev1.py 
         	git add dev2.py 
         	git remote add o1 https://@github.com/Vaishali-Tapaswi/tmp1
         	git push o1 
         	    -> give error -> rejected
         	git pull 
         		-> git log
         	git push o1	
         		
Lab3 - cmd
         c:\saama\gitdemo\demo2\tmp>git remote
                  will show you current entries in remote 
         c:\saama\gitdemo\demo2\tmp>git remote get-url origin (if origin is listed in above command)
         c:\saama\gitdemo\demo2\tmp>git remote remove origin (if origin is listed in above command)
         c:\saama\gitdemo\demo2\tmp>git remote add o1 https://{tokenid}@github.com/Vaishali-Tapaswi/tmp1
         c:\saama\gitdemo\demo2\tmp>git remote get-url o1 
         c:\saama\gitdemo\demo2\tmp>git push o1 
         confirm remote repo updations, check commits and observe times and states of each commit 
Lab2 - create repo on github 
         create new repo -> tmp1 (copy url -> https://github.com/Vaishali-Tapaswi/tmp1)
              initialize with readme file and create one aa.txt file 
         create a folder (c:\saama\gitdemo\demo2)
         cmd>cd c:\saama\gitdemo\demo2
         c:\saama\gitdemo\demo2>git init 
                                git pull 
                            or 
         c:\saama\gitdemo\demo2>git clone {url}
              observe the folder tmp1(or name of your repo)         
         c:\saama\gitdemo\demo2>cd tmp1
              create a file bb.txt, add, commit 
         c:\saama\gitdemo\demo2\tmp>git push 
                     check auth error 
         on github -> browser -> login to github -> settings-> developer setting->
                     create personal token(classic)->
                            create new classic, name, allow repo (Select scopes)
                                   generate -> copy token 
         
Lab1 - install git 
       create a folder c:\saama\gitdemo\demo1 
          create a file aa.txt in the same 
       cmd> cd c:\saama\gitdemo\demo1
           c:\saama\gitdemo\demo1>dir  ( confirm aa.txt)
           c:\saama\gitdemo\demo1>dir /a  ( show all fiels hidden as well)
           c:\saama\gitdemo\demo1>git init 
           c:\saama\gitdemo\demo1>dir /a  ( check .git folder) 
       First commit with aa.txt
          common command for git -> git show , git status, git log ( will show message that first commit is not done)
       to shift aa.txt from working area to staging area 
          c:\saama\gitdemo\demo1>git add aa.txt 
          modify aa.txt 
          c:\saama\gitdemo\demo1>git status
          modifications will be tracked 
          c:\saama\gitdemo\demo1>git commit -m "first commit"
          run all info commands (show, status and log)
          again call add and commit with second commit message 
          run all info commands (show, status and log)
      add 2/3 more files and check the messages
         
    
  
