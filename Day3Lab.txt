Lab5 - variables 
      default:
        image: python
      variables:
        GLOBAL_VAR_INFO: "A global variable AS INFO"
      
      stages:          # List of stages for jobs, and their order of execution
        - build
        - test
      
      buildpy-job:       # This job runs in the build stage, which runs first.
        stage: build
        image: 
          name: python 
        variables:
          JOB_VAR_INFO: "A job leve variable info"  
        script:
          - echo "Compiling the code..."
          - echo "Variables are '$GLOBAL_VAR' and '$JOB_VAR'"
          - echo "Variables are '$GLOBAL_VAR_INFO' and '$JOB_VAR_INFO'"
          - echo "'$MY_KEY"
          - python hello.py
          - echo "Compile complete."
      
      buildja-job:       # This job runs in the build stage, which runs first.
        stage: build
        image: 
          name: openjdk:24-slim-bullseye
        script:
          - echo "Compiling the code..."
          - set path="c:\Program Files\Java\jdk1.8.0_05\bin"
          - javac Hello.java 
          - java Hello 
          - echo "Compile complete."
      
      
      unit-test-job:   # This job runs in the test stage.
        stage: test    # It only starts when the job in the build stage completes successfully.
        script:
          - echo "Running unit tests... This will take about 60 seconds."
          - echo "Code coverage is 90%"

  Run above file and check variable values displayed for .._VAR_INFO and all others blank
  settings -> ci/cd -> variables-> create a variable for MY_KEY and check values 
    also create a masked variable and show 
Lab4 - GitLab runner configuration (https://docs.gitlab.com/runner/)
  Download - https://docs.gitlab.com/runner/install/windows.html 
  create a folder on c:\gitlab-runner and copy the file
  Browser -> demo1->settings -> ci/cd- > runners -> copy url and token
  cmd>  ./gitlab-runner.exe register --url {{url}} --registration-token {{token}}
    -> shell
  browser -> proj1-settings -> ci/cd- > runners -> confirm your runner
  Project demo1 -> Settings -> ci/cd-> runners->disable shared runners
      run pipeline -> check messages on local machine

Lab3 - create new project demo2 in saamdemo group
              create Hello.java 
                     public class Hello
                            {
                                public static void main(String []args)
                                {
                                    System.out.println("My First Java Program ");
                                }
                            };
              create new pipeline
                     modify pipeline to have two stages -> compile and run with 1 job each 
                     modify default image for java 
                     in compile -> javac Hello.java , dir, java Hello 
                     in run ->dir,  java Hello
              run -> observe errors, run job does not have hello.class
              Configure Artifact (artifact is child element of job
                      artifacts:
                         paths:
                           - Hello.class  
              run, observe artifact messages in logs and check artifact download
Lab2 - Modify and debug pipeline 
       create Hello.py and Hello.java files in repo 
              hello.py
                     # This program prints Hello, world!
                     print('Hello, world!')
              Hello.java 
                    public class Hello
                            {
                                public static void main(String []args)
                                {
                                    System.out.println("My First Java Program ");
                                }
                            };

       Modify pipeline to include 
              python hello.py
              -> check error and messages 
       Modify image (default image for all jobs)
              add following two lines before stages on root level(default)
       	       default:
                       image: python
              observe it will run automatically as soon as file is changes, check messages, observe python code running sucessfully
       Create two build jobs 1 for python 2 for java 
       in java job -> write two lines 
                     javac Hello.java 
                     java Hello
       save -> observe errors 
       Modify image for each job (not default -> delete default configuration for image)
              buildpy-job:       # This job runs in the build stage, which runs first.
                stage: build
                image: 
                  name: python 
       and same way change for java build -> image name - openjdk:24-slim-bullseye

Lab1 - login to gitlab (+)
       create new group -> saamademo, private, only for me 
       in that group -> create new project/repository -> blank project 
              demo1 -> initialize repository with a README
              update aa.txt in demo1 repo 
       in project demo1 
          left side menu -> build -> pipelines -> new -> "Hello world" with GitLab CI
              -> commit-> it will start running pipeline
              check messages from pipeline -> check stages and messages 
